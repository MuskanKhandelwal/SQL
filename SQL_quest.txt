Duplicate Job Listings

select count(count_1) AS duplicate_companies
from
(select count(company_id) AS count_1
from job_listings 
group by company_id ) 
AS tab2 
where count_1>1



Cities With Completed Trade

select city,count(city) AS total_orders from trades t
left join users u on t.user_id=u.user_id
where t.status='Completed'
group by city order by total_orders desc limit 3


Sending vs. Opening Snaps


SELECT ag.age_bucket,
ROUND(100.0 * 
SUM(a.time_spent) FILTER (WHERE a.activity_type = 'send')/
    SUM(a.time_spent),2)  AS send_perc,
ROUND(100.0 *     
SUM(a.time_spent) FILTER (WHERE a.activity_type = 'open')/
    SUM(a.time_spent),2)  AS open_perc
FROM activities a
left join age_breakdown ag on a.user_id=ag.user_id
WHERE a.activity_type IN ('send', 'open') 
GROUP BY ag.age_bucket;




Tweets' Rolling Averages
SELECT user_id,
tweet_date,
ROUND(AVG(tweet_count) OVER(
PARTITION BY user_id 
order by tweet_date
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),2) AS rolling_avg_3d 
from tweets


Top Three Salaries

WITH ranked_salary AS (
SELECT name,salary, department_id,
DENSE_RANK() OVER (
    PARTITION BY department_id ORDER BY salary DESC) AS ranking
FROM employee
)

select 
d.department_name,
  s.name,
  s.salary
FROM ranked_salary AS s
LEFT JOIN department AS d
ON s.department_id = d.department_id
WHERE s.ranking <= 3
ORDER BY d.department_name ASC, s.salary DESC, s.name ASC;

Signup Activation Rate

select ROUND(COUNT(t.email_id)::DECIMAL/COUNT(DISTINCT e.email_id),2 )AS activation_rate
from emails e left join texts t on e.email_id=t.email_id
AND signup_action ='Confirmed'

Supercloud Customer

WITH supercloud_cust AS (
SELECT c.customer_id, COUNT(DISTINCT(p.product_category)) AS product_count
FROM customer_contracts c LEFT JOIN
products p on c.product_id = p.product_id
group by c.customer_id
)

SELECT customer_id
FROM supercloud_cust
where product_count =(
select COUNT(DISTINCT product_category) FROM products);


Odd and Even Measurements
WITH table_1 AS(
SELECT CAST(measurement_time AS DATE) AS measurement_day,
measurement_value, ROW_NUMBER()
OVER(PARTITION BY CAST(measurement_time AS DATE) ORDER BY measurement_time) AS measurement_num 
  FROM measurements
)

SELECT measurement_day,
SUM(measurement_value) filter (where measurement_num%2!=0) AS odd_sum,
SUM(measurement_value) filter (where measurement_num%2=0) AS even_sum
from table_1
group by measurement_day;




https://leetcode.com/problems/trips-and-users/description/
262. Trips and Users
# Write your MySQL query statement below
select t.request_at AS Day, ROUND(SUM(t.status!='completed') /COUNT(*),2) AS 'Cancellation Rate' 
from 
trips t 
join Users u on t.client_id=u.users_id
join Users ud on t.driver_id=ud.users_id  
WHERE u.banned = 'No'
  AND ud.banned = 'No'
  AND request_at BETWEEN '2013-10-01' 
  AND '2013-10-03' 
  group by Day ;



1251. Average Selling Price
https://leetcode.com/problems/average-selling-price/description/

# Write your MySQL query statement below
select p.product_id,
IFNULL( ROUND(SUM(u.units*p.price)/SUM(u.units),2),0) AS average_price
from  Prices p left join UnitsSold u
on p.product_id = u.product_id
AND u.purchase_date BETWEEN p.start_date AND p.end_date 
group by product_id;


184: Department Highest Salary
https://leetcode.com/problems/department-highest-salary/

SELECT d.name AS Department, e.name AS Employee, e.salary AS Salary
FROM Employee e
JOIN Department d ON e.departmentId = d.id
WHERE e.salary = (
    SELECT MAX(salary)
    FROM Employee
    WHERE departmentId = e.departmentId
);


185. Department Top Three Salaries

# Write your MySQL query statement below
SELECT d.name AS Department, re.name AS 'Employee', re.salary
FROM Department d
JOIN
(SELECT *,
DENSE_RANK() OVER (PARTITION BY departmentId ORDER BY salary DESC) AS salary_rank
FROM Employee) AS re
ON d.id = re.departmentId
WHERE re.salary_rank <= 3;


https://platform.stratascratch.com/coding/10084-cum-sum-energy-consumption?utm_source=chatgpt.com&code_type=3
Cum Sum Energy Consumption

SELECT
    e.recorded_date,
    SUM(e.consumption) OVER (ORDER BY e.recorded_date) AS running_total,
    ROUND(
        SUM(e.consumption) OVER (ORDER BY e.recorded_date) * 100.0 
        / SUM(e.consumption) OVER (),
        0
    ) AS running_percentage
FROM (
    SELECT * FROM fb_eu_energy
    UNION ALL
    SELECT * FROM fb_na_energy
    UNION ALL
    SELECT * FROM fb_asia_energy
) AS e
ORDER BY e.recorded_date;


https://platform.stratascratch.com/coding/2148-monthly-sales-rolling-average?code_type=3
Monthly Sales Rolling Average
WITH monthly_sales AS (
    SELECT 
        MONTH(order_date) AS month,
        SUM(quantity * unit_price) AS sales
    FROM amazon_books a
    JOIN book_orders b
      ON a.book_id = b.book_id
    WHERE YEAR(order_date) = 2022
    GROUP BY MONTH(order_date)
)
SELECT
    month,
    sales,
    ROUND(
        AVG(sales) OVER (ORDER BY month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
        0
    ) AS rolling_avg
FROM monthly_sales
ORDER BY month;


WITH monthly_sales
 AS(select MONTH(order_date) as mon, SUM(unit_price*quantity) as month_sale
from amazon_books a 
join book_orders b
on a.book_id = b.book_id
where YEAR(order_date) = 2022
group by MONTH(order_date))

select mon, month_sale, ROUND(AVG(month_sale) OVER (order by mon),0) AS rolling_average
from monthly_sales



 602. Friend Requests II: Who Has the Most Friends
https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends/description/
Method 1
WITH all_counts AS (
    SELECT requester_id AS player_id, COUNT(*) AS cnt
    FROM RequestAccepted
    GROUP BY requester_id
    
    UNION ALL
    
    SELECT accepter_id AS player_id, COUNT(*) AS cnt
    FROM RequestAccepted
    GROUP BY accepter_id
),
friend_totals AS (
    SELECT player_id, SUM(cnt) AS num
    FROM all_counts
    GROUP BY player_id
)
SELECT player_id AS id, num
FROM friend_totals
WHERE num = (SELECT MAX(num) FROM friend_totals);



Method 2
select id,count(id) as num
from 
(
    select requester_id as id from RequestAccepted
    union all
    select accepter_id as id from RequestAccepted
)p
group  by id
order by num desc
limit 1;






1341. Movie Rating
https://leetcode.com/problems/movie-rating/description/

-- # Write your MySQL query statement below
(
  SELECT u.name AS results
  FROM MovieRating Mr
  JOIN Users u ON u.user_id = Mr.user_id
  GROUP BY u.user_id
  ORDER BY COUNT(Mr.movie_id) DESC, u.name ASC
  LIMIT 1
)
UNION ALL
(
  SELECT m.title AS results
  FROM MovieRating Mr
  JOIN Movies m ON m.movie_id = Mr.movie_id
  WHERE YEAR(Mr.created_at) = 2020 
    AND MONTH(Mr.created_at) = 2
  GROUP BY m.movie_id
  ORDER BY AVG(Mr.rating) DESC, m.title ASC
  LIMIT 1
);



1141. User Activity for the Past 30 Days I
https://leetcode.com/problems/user-activity-for-the-past-30-days-i/description/
select activity_date as "day" ,  COUNT ( DISTINCT user_id) AS active_users
from Activity where activity_date BETWEEN '2019-06-28' AND '2019-07-27'
group by activity_date 


1729. Find Followers Count
https://leetcode.com/problems/find-followers-count/description/
Select user_id, count(follower_id) as followers_count
From Followers
Group By user_id
Order By user_id






180. Consecutive Numbers
https://leetcode.com/problems/consecutive-numbers/description/
METHOD 1
# Write your MySQL query statement below
SELECT distinct 
    i1.num as ConsecutiveNums 
FROM 
    logs i1,
    logs i2,
    logs i3
WHERE
i1.id=i2.id+1 AND 
    i2.id=i3.id+1 AND 
    i1.num=i2.num AND 
    i2.num=i3.num


METHOD 2
select distinct a.num as ConsecutiveNums from Logs a
JOIN Logs b on a.id = b.id+1 AND a.num = b.num
JOIN Logs c on a.id = c.id+2 AND a.num = c.num



Spotify Streaming History
https://datalemur.com/questions/spotify-streaming-history
WITH history AS (
  SELECT 
    user_id, 
    song_id, 
    song_plays
  FROM songs_history

  UNION ALL

  SELECT 
    user_id, 
    song_id, 
    COUNT(*) AS song_plays
  FROM songs_weekly
  WHERE listen_time <= '2022-08-04 23:59:59'
  GROUP BY user_id, song_id
)
SELECT 
  user_id, 
  song_id, 
  SUM(song_plays) AS song_plays
FROM history
GROUP BY user_id, song_id
ORDER BY song_plays DESC;



User Shopping Sprees

SELECT DISTINCT T1.user_id
FROM transactions AS T1
INNER JOIN transactions AS T2
  ON DATE(T2.transaction_date) = DATE(T1.transaction_date) + 1
INNER JOIN transactions AS T3
  ON DATE(T3.transaction_date) = DATE(T1.transaction_date) + 2
ORDER BY T1.user_id;



Histogram of Users and Purchases

https://datalemur.com/questions/histogram-users-purchases

with total AS 
(SELECT  user_id, transaction_date, product_id,
RANK() OVER (PARTITION BY user_id order by transaction_date desc) AS rank2
FROM user_transactions)

select transaction_date,user_id, COUNT(product_id) AS purchase_count 
from total 
where rank2 = 1
group by user_id, transaction_date
order by transaction_date;







Compressed Mode
https://datalemur.com/questions/alibaba-compressed-mode
select item_count as mode from items_per_order where 
order_occurrences = (SELECT MAX(order_occurrences)  FROM items_per_order)
order by mode;


